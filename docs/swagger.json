{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A robust, scalable Go API template with Users module, dependency container architecture, MongoDB persistence, Redis caching, and comprehensive documentation.",
        "title": "Go API Template",
        "termsOfService": "https://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/users": {
            "get": {
                "description": "Get all users with pagination and filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in username, email, first_name, last_name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "user",
                            "admin",
                            "moderator"
                        ],
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "username",
                            "email",
                            "first_name",
                            "last_name",
                            "login_count"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users with pagination metadata",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/go-template_internal_models.UserListResponse"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.Meta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user account with validation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/go-template_internal_models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/go-template_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Username or email already exists",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/users/search": {
            "get": {
                "description": "Search users by username, email, first name, or last name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Search users",
                "parameters": [
                    {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string",
                        "example": "john",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching user profiles",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/go-template_internal_models.UserProfileResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Missing or invalid search query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/users/stats": {
            "get": {
                "description": "Get aggregated user statistics including total users, active users, verified users, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user statistics",
                "responses": {
                    "200": {
                        "description": "User statistics",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "description": "Get a specific user by their unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/go-template_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a user account (user data is preserved but marked as deleted)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/go-template_internal_shared_response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially update user information with validation (only provided fields are updated)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data (partial)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/go-template_internal_models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/go-template_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request body",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Username or email already exists",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/password": {
            "patch": {
                "description": "Change a user's password with current password verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password change data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/go-template_internal_models.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/go-template_internal_shared_response.Response"
                        }
                    },
                    "400": {
                        "description": "Validation error or incorrect current password",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/profile": {
            "get": {
                "description": "Get a user's public profile information (limited data for privacy)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user public profile",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User public profile",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/go-template_internal_models.UserProfileResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/verify": {
            "patch": {
                "description": "Mark a user's email as verified",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Verify user email",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verified successfully",
                        "schema": {
                            "$ref": "#/definitions/go-template_internal_shared_response.Response"
                        }
                    },
                    "400": {
                        "description": "User already verified or invalid ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/go-template_internal_shared_response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "go-template_internal_models.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "current_password",
                "new_password"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "example": "NewSecurePassword456"
                },
                "current_password": {
                    "type": "string",
                    "example": "OldPassword123"
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 8,
                    "example": "NewSecurePassword456"
                }
            }
        },
        "go-template_internal_models.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "john@example.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 8,
                    "example": "SecurePass123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3,
                    "example": "johndoe"
                }
            }
        },
        "go-template_internal_models.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Software developer and coffee enthusiast"
                },
                "email": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "jane@example.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Jane"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Smith"
                },
                "location": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "San Francisco, CA"
                },
                "username": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3,
                    "example": "janedoe"
                },
                "website": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "https://johndoe.dev"
                }
            }
        },
        "go-template_internal_models.UserListResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/go-template_internal_models.UserResponse"
                    }
                }
            }
        },
        "go-template_internal_models.UserProfileResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_login_at": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "go-template_internal_models.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified_at": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_login_at": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "login_count": {
                    "type": "integer"
                },
                "preferences": {
                    "type": "object",
                    "additionalProperties": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "go-template_internal_shared_response.ErrorInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "go-template_internal_shared_response.Meta": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "go-template_internal_shared_response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/go-template_internal_shared_response.ErrorInfo"
                },
                "message": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/go-template_internal_shared_response.Meta"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User management operations including CRUD, search, and account management",
            "name": "Users"
        },
        {
            "description": "System health and configuration endpoints",
            "name": "System"
        }
    ]
}